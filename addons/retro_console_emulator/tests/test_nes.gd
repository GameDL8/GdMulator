extends Node

func _ready() -> void:
	for test_group in get_children():
		if &"test" in test_group:
			test_group.test()
	
	test_sta_store_data()
	test_adc_add_with_carry()
	test_and_bitwise_operator()
	test_0xaa_tax_move_a_to_x()
	test_0xa8_tax_move_a_to_y()
	test_inx_overflow()
	test_5_ops_working_together()

func test_sta_store_data():
	test_0x85_sta_zeropage_store_data()
	test_0x8d_sta_absolute_store_data()
	test_0x95_sta_zeropage_x_store_data()
	test_0x9d_sta_absolute_x_store_data()
	test_0x99_sta_absolute_y_store_data()
	test_0x81_sta_indirect_x_store_data()
	test_0x91_sta_indirect_y_store_data()

func test_adc_add_with_carry():
	test_0x69_adc_immediate_add_with_carry()
	test_0x65_adc_zeropage_add_with_carry()
	test_0x6d_adc_absolute_add_with_carry()
	test_0x75_adc_zeropage_x_add_with_carry()
	test_0x7d_adc_absolute_x_add_with_carry()
	test_0x79_adc_absolute_y_add_with_carry()
	test_0x61_adc_indirect_x_add_with_carry()
	test_0x71_adc_indirect_y_add_with_carry()

func test_and_bitwise_operator():
	test_0x29_and_immediate_bitwise_and()
	test_0x25_and_zeropage_bitwise_and()
	test_0x35_and_zeropage_x_bitwise_and()
	test_0x2d_and_absolute_bitwise_and()
	test_0x3d_and_absolute_x_bitwise_and()
	test_0x39_and_absolute_y_bitwise_and()
	test_0x21_and_indirect_x_bitwise_and()
	test_0x31_and_indirect_y_bitwise_and()

func test_0x85_sta_zeropage_store_data():
	var cpu = NesCPU.new()
	cpu.load_and_run([0xa9, 0x05, 0x85, 0x10, 0x00])
	assert(cpu.memory.mem_read(0x10) == 0x05)
	print("test_0x85_sta_zeropage_store_data PASSED!")


func test_0x8d_sta_absolute_store_data():
	var cpu = NesCPU.new()
	cpu.load_and_run([0xa9, 0x05, 0x8d, 0x12, 0x10, 0x00])
	assert(cpu.memory.mem_read(0x1012) == 0x05)
	print("test_0x8d_sta_absolute_store_data PASSED!")


func test_0x95_sta_zeropage_x_store_data():
	var cpu = NesCPU.new()
	cpu.load_and_run([0xa9, 0x05, 0xaa, 0x95, 0x12, 0x00])
	assert(cpu.memory.mem_read(0x17) == 0x05)
	print("test_0x95_sta_zeropage_x_store_data PASSED!")


func test_0x9d_sta_absolute_x_store_data():
	var cpu = NesCPU.new()
	cpu.load_and_run([0xa9, 0x05, 0xaa, 0x9d, 0x12, 0x10, 0x00])
	assert(cpu.memory.mem_read(0x1017) == 0x05)
	print("test_0x9d_sta_absolute_x_store_data PASSED!")


func test_0x99_sta_absolute_y_store_data():
	var cpu = NesCPU.new()
	cpu.load_and_run([0xa9, 0x05, 0xa8, 0x99, 0x12, 0x10, 0x00])
	assert(cpu.memory.mem_read(0x1017) == 0x05)
	print("test_0x99_sta_absolute_y_store_data PASSED!")


func test_0x81_sta_indirect_x_store_data():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x10, 0x03)
	cpu.memory.mem_write(0x11, 0x40)
	cpu.load_and_run([0xa9, 0x05, 0xaa, 0x81, 0x0B, 0x00])
	assert(cpu.memory.mem_read(0x4003) == 0x05)
	print("test_0x81_sta_indirect_x_store_data PASSED!")


func test_0x91_sta_indirect_y_store_data():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x10, 0x03)
	cpu.memory.mem_write(0x11, 0x40)
	cpu.load_and_run([0xa9, 0x05, 0xa8, 0x91, 0x10, 0x00])
	assert(cpu.memory.mem_read(0x4008) == 0x05)
	print("test_0x91_sta_indirect_y_store_data PASSED!")


func test_0xaa_tax_move_a_to_x():
	var cpu = NesCPU.new()
	cpu.load_and_run([0xa9, 10, 0xaa, 0x00])
	assert(cpu.register_x.value == 10)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b10000001, 0xaa, 0x00])
	assert(cpu.register_x.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0, 0xaa, 0x00])
	assert(cpu.register_x.value == 0)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xaa_tax_move_a_to_x PASSED!")


func test_0xa8_tax_move_a_to_y():
	var cpu = NesCPU.new()
	cpu.load_and_run([0xa9, 10, 0xa8, 0x00])
	assert(cpu.register_y.value == 10)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b10000001, 0xa8, 0x00])
	assert(cpu.register_y.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0, 0xa8, 0x00])
	assert(cpu.register_y.value == 0)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xa8_tax_move_a_to_y PASSED!")


func test_0x69_adc_immediate_add_with_carry():
	var cpu = NesCPU.new()
	cpu.load_and_run([0xa9, 0b01000000, 0x69, 0b01000000, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x69, 0b10000000, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b01000000, 0x69, 0b00000001, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b01111110, 0x69, 0b10000001, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x69, 0b00000001, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11000000, 0x69, 0b11000000, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11111111, 0x69, 0b00000001, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x69_adc_immediate_add_with_carry PASSED!")


func test_0x65_adc_zeropage_add_with_carry():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x10, 0b01000000)
	cpu.memory.mem_write(0x11, 0b10000000)
	cpu.memory.mem_write(0x12, 0b00000001)
	cpu.memory.mem_write(0x13, 0b10000001)
	cpu.memory.mem_write(0x14, 0b00000001)
	cpu.memory.mem_write(0x15, 0b11000000)
	cpu.memory.mem_write(0x16, 0b00000001)
	cpu.load_and_run([0xa9, 0b01000000, 0x65, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x65, 0x11, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b01000000, 0x65, 0x12, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b01111110, 0x65, 0x13, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x65, 0x14, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11000000, 0x65, 0x15, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11111111, 0x65, 0x16, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x65_adc_zeropage_add_with_carry PASSED!")


func test_0x6d_adc_absolute_add_with_carry():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x1010, 0b01000000)
	cpu.memory.mem_write(0x1011, 0b10000000)
	cpu.memory.mem_write(0x1012, 0b00000001)
	cpu.memory.mem_write(0x1013, 0b10000001)
	cpu.memory.mem_write(0x1014, 0b00000001)
	cpu.memory.mem_write(0x1015, 0b11000000)
	cpu.memory.mem_write(0x1016, 0b00000001)
	cpu.load_and_run([0xa9, 0b01000000, 0x6d, 0x10, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x6d, 0x11, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b01000000, 0x6d, 0x12, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b01111110, 0x6d, 0x13, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x6d, 0x14, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11000000, 0x6d, 0x15, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11111111, 0x6d, 0x16, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x6d_adc_absolute_add_with_carry PASSED!")


func test_0x75_adc_zeropage_x_add_with_carry():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x11, 0b01000000)
	cpu.memory.mem_write(0x12, 0b10000000)
	cpu.memory.mem_write(0x13, 0b00000001)
	cpu.memory.mem_write(0x14, 0b10000001)
	cpu.memory.mem_write(0x15, 0b00000001)
	cpu.memory.mem_write(0x16, 0b11000000)
	cpu.memory.mem_write(0x17, 0b00000001)
	cpu.load_and_run([0xE8, 0xa9, 0b01000000, 0x75, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b10000000, 0x75, 0x11, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b01000000, 0x75, 0x12, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b01111110, 0x75, 0x13, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b10000000, 0x75, 0x14, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b11000000, 0x75, 0x15, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b11111111, 0x75, 0x16, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x75_adc_zeropage_x_add_with_carry PASSED!")


func test_0x7d_adc_absolute_x_add_with_carry():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x1011, 0b01000000)
	cpu.memory.mem_write(0x1012, 0b10000000)
	cpu.memory.mem_write(0x1013, 0b00000001)
	cpu.memory.mem_write(0x1014, 0b10000001)
	cpu.memory.mem_write(0x1015, 0b00000001)
	cpu.memory.mem_write(0x1016, 0b11000000)
	cpu.memory.mem_write(0x1017, 0b00000001)
	cpu.load_and_run([0xE8, 0xa9, 0b01000000, 0x7d, 0x10, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b10000000, 0x7d, 0x11, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b01000000, 0x7d, 0x12, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b01111110, 0x7d, 0x13, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b10000000, 0x7d, 0x14, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b11000000, 0x7d, 0x15, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b11111111, 0x7d, 0x16, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x7d_adc_absolute_x_add_with_carry PASSED!")


func test_0x79_adc_absolute_y_add_with_carry():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x1011, 0b01000000)
	cpu.memory.mem_write(0x1012, 0b10000000)
	cpu.memory.mem_write(0x1013, 0b00000001)
	cpu.memory.mem_write(0x1014, 0b10000001)
	cpu.memory.mem_write(0x1015, 0b00000001)
	cpu.memory.mem_write(0x1016, 0b11000000)
	cpu.memory.mem_write(0x1017, 0b00000001)
	cpu.load_and_run([0xC8, 0xa9, 0b01000000, 0x79, 0x10, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b10000000, 0x79, 0x11, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xC8, 0xa9, 0b01000000, 0x79, 0x12, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xC8, 0xa9, 0b01111110, 0x79, 0x13, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b10000000, 0x79, 0x14, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b11000000, 0x79, 0x15, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b11111111, 0x79, 0x16, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x79_adc_absolute_y_add_with_carry PASSED!")


func test_0x61_adc_indirect_x_add_with_carry():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x10+1, 0x03)
	cpu.memory.mem_write(0x11+1, 0x40)
	cpu.memory.mem_write(0x12+1, 0x04)
	cpu.memory.mem_write(0x13+1, 0x40)
	cpu.memory.mem_write(0x14+1, 0x05)
	cpu.memory.mem_write(0x15+1, 0x40)
	cpu.memory.mem_write(0x16+1, 0x06)
	cpu.memory.mem_write(0x17+1, 0x40)
	cpu.memory.mem_write(0x18+1, 0x07)
	cpu.memory.mem_write(0x19+1, 0x40)
	cpu.memory.mem_write(0x1A+1, 0x08)
	cpu.memory.mem_write(0x1B+1, 0x40)
	cpu.memory.mem_write(0x1C+1, 0x09)
	cpu.memory.mem_write(0x1D+1, 0x40)
	cpu.memory.mem_write(0x4003, 0b01000000)
	cpu.memory.mem_write(0x4004, 0b10000000)
	cpu.memory.mem_write(0x4005, 0b00000001)
	cpu.memory.mem_write(0x4006, 0b10000001)
	cpu.memory.mem_write(0x4007, 0b00000001)
	cpu.memory.mem_write(0x4008, 0b11000000)
	cpu.memory.mem_write(0x4009, 0b00000001)
	cpu.load_and_run([0xE8, 0xa9, 0b01000000, 0x61, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b10000000, 0x61, 0x12, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b01000000, 0x61, 0x14, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b01111110, 0x61, 0x16, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b10000000, 0x61, 0x18, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b11000000, 0x61, 0x1A, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b11111111, 0x61, 0x1C, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x61_adc_indirect_x_add_with_carry PASSED!")


func test_0x71_adc_indirect_y_add_with_carry():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x10, 0x03)
	cpu.memory.mem_write(0x11, 0x40)
	cpu.memory.mem_write(0x12, 0x04)
	cpu.memory.mem_write(0x13, 0x40)
	cpu.memory.mem_write(0x14, 0x05)
	cpu.memory.mem_write(0x15, 0x40)
	cpu.memory.mem_write(0x16, 0x06)
	cpu.memory.mem_write(0x17, 0x40)
	cpu.memory.mem_write(0x18, 0x07)
	cpu.memory.mem_write(0x19, 0x40)
	cpu.memory.mem_write(0x1A, 0x08)
	cpu.memory.mem_write(0x1B, 0x40)
	cpu.memory.mem_write(0x1C, 0x09)
	cpu.memory.mem_write(0x1D, 0x40)
	cpu.memory.mem_write(0x4003+1, 0b01000000)
	cpu.memory.mem_write(0x4004+1, 0b10000000)
	cpu.memory.mem_write(0x4005+1, 0b00000001)
	cpu.memory.mem_write(0x4006+1, 0b10000001)
	cpu.memory.mem_write(0x4007+1, 0b00000001)
	cpu.memory.mem_write(0x4008+1, 0b11000000)
	cpu.memory.mem_write(0x4009+1, 0b00000001)
	cpu.load_and_run([0xC8, 0xa9, 0b01000000, 0x71, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b10000000, 0x71, 0x12, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xC8, 0xa9, 0b01000000, 0x71, 0x14, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xC8, 0xa9, 0b01111110, 0x71, 0x16, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b10000000, 0x71, 0x18, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b11000000, 0x71, 0x1A, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b11111111, 0x71, 0x1C, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x71_adc_indirect_y_add_with_carry PASSED!")


func test_0x29_and_immediate_bitwise_and():
	var cpu = NesCPU.new()
	cpu.load_and_run([0xa9, 0b11100100, 0x29, 0b01001000, 0x00])
	assert(cpu.register_a.value == 0b01000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b11100100, 0x29, 0b11001000, 0x00])
	assert(cpu.register_a.value == 0b11000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11100100, 0x29, 0b00011011, 0x00])
	assert(cpu.register_a.value == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x29_and_immediate_bitwise_and PASSED!")


func test_0x25_and_zeropage_bitwise_and():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x10, 0b11100100)
	cpu.load_and_run([0xa9, 0b01001000, 0x25, 0x10, 0x00])
	assert(cpu.register_a.value == 0b01000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b11001000, 0x25, 0x10, 0x00])
	assert(cpu.register_a.value == 0b11000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b00011011, 0x25, 0x10, 0x00])
	assert(cpu.register_a.value == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x25_and_zeropage_bitwise_and PASSED!")


func test_0x35_and_zeropage_x_bitwise_and():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x10, 0b11100100)
	cpu.load_and_run([0xE8, 0xa9, 0b01001000, 0x35, 0x0F, 0x00])
	assert(cpu.register_a.value == 0b01000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b11001000, 0x35, 0x0F, 0x00])
	assert(cpu.register_a.value == 0b11000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b00011011, 0x35, 0x0F, 0x00])
	assert(cpu.register_a.value == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x35_and_zeropage_x_bitwise_and PASSED!")


func test_0x2d_and_absolute_bitwise_and():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x1040, 0b11100100)
	cpu.load_and_run([0xa9, 0b01001000, 0x2d, 0x40, 0x10, 0x00])
	assert(cpu.register_a.value == 0b01000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b11001000, 0x2d, 0x40, 0x10, 0x00])
	assert(cpu.register_a.value == 0b11000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b00011011, 0x2d, 0x40, 0x10, 0x00])
	assert(cpu.register_a.value == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x2d_and_absolute_bitwise_and PASSED!")


func test_0x3d_and_absolute_x_bitwise_and():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x1041, 0b11100100)
	cpu.load_and_run([0xE8, 0xa9, 0b01001000, 0x3d, 0x40, 0x10, 0x00])
	assert(cpu.register_a.value == 0b01000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b11001000, 0x3d, 0x40, 0x10, 0x00])
	assert(cpu.register_a.value == 0b11000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b00011011, 0x3d, 0x40, 0x10, 0x00])
	assert(cpu.register_a.value == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x3d_and_absolute_x_bitwise_and PASSED!")


func test_0x39_and_absolute_y_bitwise_and():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x1041, 0b11100100)
	cpu.load_and_run([0xC8, 0xa9, 0b01001000, 0x39, 0x40, 0x10, 0x00])
	assert(cpu.register_a.value == 0b01000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xC8, 0xa9, 0b11001000, 0x39, 0x40, 0x10, 0x00])
	assert(cpu.register_a.value == 0b11000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b00011011, 0x39, 0x40, 0x10, 0x00])
	assert(cpu.register_a.value == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x39_and_absolute_y_bitwise_and PASSED!")


func test_0x21_and_indirect_x_bitwise_and():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x10+1, 0x03)
	cpu.memory.mem_write(0x11+1, 0x40)
	cpu.memory.mem_write(0x4003, 0b11100100)
	cpu.load_and_run([0xE8, 0xa9, 0b01001000, 0x21, 0x10, 0x00])
	assert(cpu.register_a.value == 0b01000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b11001000, 0x21, 0x10, 0x00])
	assert(cpu.register_a.value == 0b11000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b00011011, 0x21, 0x10, 0x00])
	assert(cpu.register_a.value == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x21_and_indirect_x_bitwise_and PASSED!")


func test_0x31_and_indirect_y_bitwise_and():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x10, 0x03)
	cpu.memory.mem_write(0x11, 0x40)
	cpu.memory.mem_write(0x4003+1, 0b11100100)
	cpu.load_and_run([0xC8, 0xa9, 0b01001000, 0x31, 0x10, 0x00])
	assert(cpu.register_a.value == 0b01000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xC8, 0xa9, 0b11001000, 0x31, 0x10, 0x00])
	assert(cpu.register_a.value == 0b11000000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b00011011, 0x31, 0x10, 0x00])
	assert(cpu.register_a.value == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x31_and_indirect_y_bitwise_and PASSED!")


func test_inx_overflow():
	var cpu = NesCPU.new()
	cpu.load_and_run([0xa9, 0xff, 0xAA, 0xA8, 0xe8, 0xe8, 0xc8,0xc8, 0xc8, 0x00])
	assert(cpu.register_x.value == 1)
	assert(cpu.register_y.value == 2)
	print("test_inx_overflow PASSED!")
	

func test_5_ops_working_together():
	var cpu = NesCPU.new()
	cpu.load_and_run([0xa9, 0xc0, 0xaa, 0xe8, 0x00])
	assert(cpu.register_x.value == 0xc1)
	print("test_5_ops_working_together PASSED!")
