extends "res://addons/retro_console_emulator/tests/base_test.gd"


func test():
	test_0x2a_rol_acumulator_rotate_left()
	test_0x26_rol_zeropage_rotate_left()
	test_0x36_rol_zeropage_x_rotate_left()
	test_0x2e_rol_absolute_rotate_left()
	test_0x3e_rol_absolute_x_rotate_left()


func test_0x2a_rol_acumulator_rotate_left():
	var cpu = CPU6502.new()
	cpu.load_and_run([0xa9, 0b11000100, 0x38, 0x2a, 0x00])
	assert(cpu.register_a.value == 0b10001001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0xa9, 0b10000100, 0x2a, 0x00])
	assert(cpu.register_a.value == 0b00001000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x2a, 0x00])
	assert(cpu.register_a.value == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	print("test_0x2a_rol_acumulator_rotate_left PASSED!")


func test_0x26_rol_zeropage_rotate_left():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x03, 0b11000100)
	cpu.memory.mem_write(0x04, 0b10000100)
	cpu.memory.mem_write(0x05, 0b10000000)
	cpu.load_and_run([0x38, 0x26, 0x03, 0x00])
	assert(cpu.memory.mem_read(0x03) == 0b10001001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0x26, 0x04, 0x00])
	assert(cpu.memory.mem_read(0x04) == 0b00001000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0x26, 0x05, 0x00])
	assert(cpu.memory.mem_read(0x05) == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	print("test_0x26_rol_zeropage_rotate_left PASSED!")


func test_0x36_rol_zeropage_x_rotate_left():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x03+5, 0b11000100)
	cpu.memory.mem_write(0x04+5, 0b10000100)
	cpu.memory.mem_write(0x05+5, 0b10000000)
	cpu.load_and_run([0xa2, 0x05, 0x38, 0x36, 0x03, 0x00])
	assert(cpu.memory.mem_read(0x03+5) == 0b10001001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0xa2, 0x05, 0x36, 0x04, 0x00])
	assert(cpu.memory.mem_read(0x04+5) == 0b00001000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0xa2, 0x05, 0x36, 0x05, 0x00])
	assert(cpu.memory.mem_read(0x05+5) == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	print("test_0x36_rol_zeropage_x_rotate_left PASSED!")


func test_0x2e_rol_absolute_rotate_left():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x4003, 0b11000100)
	cpu.memory.mem_write(0x4004, 0b10000100)
	cpu.memory.mem_write(0x4005, 0b10000000)
	cpu.load_and_run([0x38, 0x2e, 0x03, 0x40, 0x00])
	assert(cpu.memory.mem_read(0x4003) == 0b10001001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0x2e, 0x04, 0x40, 0x00])
	assert(cpu.memory.mem_read(0x4004) == 0b00001000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0x2e, 0x05, 0x40, 0x00])
	assert(cpu.memory.mem_read(0x4005) == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	print("test_0x2e_rol_absolute_rotate_left PASSED!")


func test_0x3e_rol_absolute_x_rotate_left():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x4003+5, 0b11000100)
	cpu.memory.mem_write(0x4004+5, 0b10000100)
	cpu.memory.mem_write(0x4005+5, 0b10000000)
	cpu.load_and_run([0xa2, 0x05, 0x38, 0x3e, 0x03, 0x40, 0x00])
	assert(cpu.memory.mem_read(0x4003+5) == 0b10001001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0xa2, 0x05, 0x3e, 0x04, 0x40, 0x00])
	assert(cpu.memory.mem_read(0x4004+5) == 0b00001000)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0xa2, 0x05, 0x3e, 0x05, 0x40, 0x00])
	assert(cpu.memory.mem_read(0x4005+5) == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	print("test_0x3e_rol_absolute_x_rotate_left PASSED!")
