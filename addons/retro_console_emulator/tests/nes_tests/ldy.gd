extends "res://addons/retro_console_emulator/tests/base_test.gd"


func test():
	test_0xa0_ldy_immediate_load_register_y()
	test_0xa4_ldy_zeropage_load_register_y()
	test_0xb4_ldy_zeropage_x_load_register_y()
	test_0xac_ldy_absolute_load_register_y()
	test_0xbc_ldy_absolute_x_load_register_y()


func test_0xa0_ldy_immediate_load_register_y():
	var cpu = CPU6502.new()
	cpu.load_and_run([0xa0, 0x05, 0x00])
	assert(cpu.register_y.value == 0x05)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa0, 0b10000001, 0x00])
	assert(cpu.register_y.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa0, 0x00, 0x00])
	assert(cpu.register_y.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xa0_ldy_immediate_load_register_y PASSED!")


func test_0xa4_ldy_zeropage_load_register_y():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x10, 0x15)
	cpu.memory.mem_write(0x11, 0b10000001)
	cpu.memory.mem_write(0x12, 0x00)
	cpu.load_and_run([0xa4, 0x10, 0x00])
	assert(cpu.register_y.value == 0x15)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa4, 0x11, 0x00])
	assert(cpu.register_y.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa4, 0x12, 0x00])
	assert(cpu.register_y.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xa4_ldy_zeropage_load_register_y PASSED!")


func test_0xb4_ldy_zeropage_x_load_register_y():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x10, 0x15)
	cpu.memory.mem_write(0x11, 0b10000001)
	cpu.memory.mem_write(0x12, 0x00)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xb4, 0x00, 0x00])
	assert(cpu.register_y.value == 0x15)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xb4, 0x01, 0x00])
	assert(cpu.register_y.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xb4, 0x02, 0x00])
	assert(cpu.register_y.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xb4_ldy_zeropage_x_load_register_y PASSED!")


func test_0xac_ldy_absolute_load_register_y():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x0110, 0x15)
	cpu.memory.mem_write(0x0111, 0b10000001)
	cpu.memory.mem_write(0x0112, 0x00)
	cpu.load_and_run([0xac, 0x10, 0x01, 0x00])
	assert(cpu.register_y.value == 0x15)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xac, 0x11, 0x01, 0x00])
	assert(cpu.register_y.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xac, 0x12, 0x01, 0x00])
	assert(cpu.register_y.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xac_ldy_absolute_load_register_y PASSED!")


func test_0xbc_ldy_absolute_x_load_register_y():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x0110, 0x15)
	cpu.memory.mem_write(0x0111, 0b10000001)
	cpu.memory.mem_write(0x0112, 0x00)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xbc, 0x00, 0x01, 0x00])
	assert(cpu.register_y.value == 0x15)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xbc, 0x01, 0x01, 0x00])
	assert(cpu.register_y.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xbc, 0x02, 0x01, 0x00])
	assert(cpu.register_y.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xbc_ldy_absolute_x_load_register_y PASSED!")
