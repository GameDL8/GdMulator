extends "res://addons/retro_console_emulator/tests/base_test.gd"


func test():
	test_0x69_adc_immediate_add_with_carry()
	test_0x65_adc_zeropage_add_with_carry()
	test_0x6d_adc_absolute_add_with_carry()
	test_0x75_adc_zeropage_x_add_with_carry()
	test_0x7d_adc_absolute_x_add_with_carry()
	test_0x79_adc_absolute_y_add_with_carry()
	test_0x61_adc_indirect_x_add_with_carry()
	test_0x71_adc_indirect_y_add_with_carry()


func test_0x69_adc_immediate_add_with_carry():
	var cpu = CPU6502.new()
	cpu.load_and_run([0xa9, 0b01000000, 0x69, 0b01000000, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x69, 0b10000000, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b01000000, 0x69, 0b00000001, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b01111110, 0x69, 0b10000001, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x69, 0b00000001, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11000000, 0x69, 0b11000000, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11111111, 0x69, 0b00000001, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x69_adc_immediate_add_with_carry PASSED!")


func test_0x65_adc_zeropage_add_with_carry():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x10, 0b01000000)
	cpu.memory.mem_write(0x11, 0b10000000)
	cpu.memory.mem_write(0x12, 0b00000001)
	cpu.memory.mem_write(0x13, 0b10000001)
	cpu.memory.mem_write(0x14, 0b00000001)
	cpu.memory.mem_write(0x15, 0b11000000)
	cpu.memory.mem_write(0x16, 0b00000001)
	cpu.load_and_run([0xa9, 0b01000000, 0x65, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x65, 0x11, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b01000000, 0x65, 0x12, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b01111110, 0x65, 0x13, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x65, 0x14, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11000000, 0x65, 0x15, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11111111, 0x65, 0x16, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x65_adc_zeropage_add_with_carry PASSED!")


func test_0x6d_adc_absolute_add_with_carry():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x1010, 0b01000000)
	cpu.memory.mem_write(0x1011, 0b10000000)
	cpu.memory.mem_write(0x1012, 0b00000001)
	cpu.memory.mem_write(0x1013, 0b10000001)
	cpu.memory.mem_write(0x1014, 0b00000001)
	cpu.memory.mem_write(0x1015, 0b11000000)
	cpu.memory.mem_write(0x1016, 0b00000001)
	cpu.load_and_run([0xa9, 0b01000000, 0x6d, 0x10, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x6d, 0x11, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b01000000, 0x6d, 0x12, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b01111110, 0x6d, 0x13, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b10000000, 0x6d, 0x14, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11000000, 0x6d, 0x15, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0b11111111, 0x6d, 0x16, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x6d_adc_absolute_add_with_carry PASSED!")


func test_0x75_adc_zeropage_x_add_with_carry():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x11, 0b01000000)
	cpu.memory.mem_write(0x12, 0b10000000)
	cpu.memory.mem_write(0x13, 0b00000001)
	cpu.memory.mem_write(0x14, 0b10000001)
	cpu.memory.mem_write(0x15, 0b00000001)
	cpu.memory.mem_write(0x16, 0b11000000)
	cpu.memory.mem_write(0x17, 0b00000001)
	cpu.load_and_run([0xE8, 0xa9, 0b01000000, 0x75, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b10000000, 0x75, 0x11, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b01000000, 0x75, 0x12, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b01111110, 0x75, 0x13, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b10000000, 0x75, 0x14, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b11000000, 0x75, 0x15, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b11111111, 0x75, 0x16, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x75_adc_zeropage_x_add_with_carry PASSED!")


func test_0x7d_adc_absolute_x_add_with_carry():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x1011, 0b01000000)
	cpu.memory.mem_write(0x1012, 0b10000000)
	cpu.memory.mem_write(0x1013, 0b00000001)
	cpu.memory.mem_write(0x1014, 0b10000001)
	cpu.memory.mem_write(0x1015, 0b00000001)
	cpu.memory.mem_write(0x1016, 0b11000000)
	cpu.memory.mem_write(0x1017, 0b00000001)
	cpu.load_and_run([0xE8, 0xa9, 0b01000000, 0x7d, 0x10, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b10000000, 0x7d, 0x11, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b01000000, 0x7d, 0x12, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b01111110, 0x7d, 0x13, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b10000000, 0x7d, 0x14, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b11000000, 0x7d, 0x15, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b11111111, 0x7d, 0x16, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x7d_adc_absolute_x_add_with_carry PASSED!")


func test_0x79_adc_absolute_y_add_with_carry():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x1011, 0b01000000)
	cpu.memory.mem_write(0x1012, 0b10000000)
	cpu.memory.mem_write(0x1013, 0b00000001)
	cpu.memory.mem_write(0x1014, 0b10000001)
	cpu.memory.mem_write(0x1015, 0b00000001)
	cpu.memory.mem_write(0x1016, 0b11000000)
	cpu.memory.mem_write(0x1017, 0b00000001)
	cpu.load_and_run([0xC8, 0xa9, 0b01000000, 0x79, 0x10, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b10000000, 0x79, 0x11, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xC8, 0xa9, 0b01000000, 0x79, 0x12, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xC8, 0xa9, 0b01111110, 0x79, 0x13, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b10000000, 0x79, 0x14, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b11000000, 0x79, 0x15, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b11111111, 0x79, 0x16, 0x10, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x79_adc_absolute_y_add_with_carry PASSED!")


func test_0x61_adc_indirect_x_add_with_carry():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x10+1, 0x03)
	cpu.memory.mem_write(0x11+1, 0x40)
	cpu.memory.mem_write(0x12+1, 0x04)
	cpu.memory.mem_write(0x13+1, 0x40)
	cpu.memory.mem_write(0x14+1, 0x05)
	cpu.memory.mem_write(0x15+1, 0x40)
	cpu.memory.mem_write(0x16+1, 0x06)
	cpu.memory.mem_write(0x17+1, 0x40)
	cpu.memory.mem_write(0x18+1, 0x07)
	cpu.memory.mem_write(0x19+1, 0x40)
	cpu.memory.mem_write(0x1A+1, 0x08)
	cpu.memory.mem_write(0x1B+1, 0x40)
	cpu.memory.mem_write(0x1C+1, 0x09)
	cpu.memory.mem_write(0x1D+1, 0x40)
	cpu.memory.mem_write(0x4003, 0b01000000)
	cpu.memory.mem_write(0x4004, 0b10000000)
	cpu.memory.mem_write(0x4005, 0b00000001)
	cpu.memory.mem_write(0x4006, 0b10000001)
	cpu.memory.mem_write(0x4007, 0b00000001)
	cpu.memory.mem_write(0x4008, 0b11000000)
	cpu.memory.mem_write(0x4009, 0b00000001)
	cpu.load_and_run([0xE8, 0xa9, 0b01000000, 0x61, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b10000000, 0x61, 0x12, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b01000000, 0x61, 0x14, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xE8, 0xa9, 0b01111110, 0x61, 0x16, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b10000000, 0x61, 0x18, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b11000000, 0x61, 0x1A, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xE8, 0xa9, 0b11111111, 0x61, 0x1C, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x61_adc_indirect_x_add_with_carry PASSED!")


func test_0x71_adc_indirect_y_add_with_carry():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x10, 0x03)
	cpu.memory.mem_write(0x11, 0x40)
	cpu.memory.mem_write(0x12, 0x04)
	cpu.memory.mem_write(0x13, 0x40)
	cpu.memory.mem_write(0x14, 0x05)
	cpu.memory.mem_write(0x15, 0x40)
	cpu.memory.mem_write(0x16, 0x06)
	cpu.memory.mem_write(0x17, 0x40)
	cpu.memory.mem_write(0x18, 0x07)
	cpu.memory.mem_write(0x19, 0x40)
	cpu.memory.mem_write(0x1A, 0x08)
	cpu.memory.mem_write(0x1B, 0x40)
	cpu.memory.mem_write(0x1C, 0x09)
	cpu.memory.mem_write(0x1D, 0x40)
	cpu.memory.mem_write(0x4003+1, 0b01000000)
	cpu.memory.mem_write(0x4004+1, 0b10000000)
	cpu.memory.mem_write(0x4005+1, 0b00000001)
	cpu.memory.mem_write(0x4006+1, 0b10000001)
	cpu.memory.mem_write(0x4007+1, 0b00000001)
	cpu.memory.mem_write(0x4008+1, 0b11000000)
	cpu.memory.mem_write(0x4009+1, 0b00000001)
	cpu.load_and_run([0xC8, 0xa9, 0b01000000, 0x71, 0x10, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b10000000, 0x71, 0x12, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == true)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xC8, 0xa9, 0b01000000, 0x71, 0x14, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xC8, 0xa9, 0b01111110, 0x71, 0x16, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b10000000, 0x71, 0x18, 0x00])
	assert(cpu.flags.C.value == false)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b11000000, 0x71, 0x1A, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xC8, 0xa9, 0b11111111, 0x71, 0x1C, 0x00])
	assert(cpu.flags.C.value == true)
	assert(cpu.flags.V.value == false)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0x71_adc_indirect_y_add_with_carry PASSED!")
