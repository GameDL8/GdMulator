extends "res://addons/retro_console_emulator/tests/base_test.gd"


func test():
	test_0xa9_lda_immediate_load_data()
	test_0xa5_lda_zeropage_load_data()
	test_0xad_lda_absolute_load_data()
	test_0xb5_lda_zeropage_x_load_data()
	test_0xbd_lda_absolute_x_load_data()
	test_0xb9_lda_absolute_y_load_data()
	test_0xa1_lda_indirect_x_load_data()
	test_0xb1_lda_indirect_y_load_data()

func test_0xa9_lda_immediate_load_data():
	var cpu = CPU6502.new()
	cpu.load_and_run([0xa9, 0x05, 0x00])
	assert(cpu.register_a.value == 0x05)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0b10000001, 0x00])
	assert(cpu.register_a.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0x00, 0x00])
	assert(cpu.register_a.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xa9_lda_immediate_load_data PASSED!")

func test_0xa5_lda_zeropage_load_data():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x10, 0x15)
	cpu.memory.mem_write(0x11, 0b10000001)
	cpu.memory.mem_write(0x12, 0x00)
	cpu.load_and_run([0xa5, 0x10, 0x00])
	assert(cpu.register_a.value == 0x15)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa5, 0x11, 0x00])
	assert(cpu.register_a.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa5, 0x12, 0x00])
	assert(cpu.register_a.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xa5_lda_zeropage_load_data PASSED!")


func test_0xad_lda_absolute_load_data():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x0110, 0x15)
	cpu.memory.mem_write(0x0111, 0b10000001)
	cpu.memory.mem_write(0x0112, 0x00)
	cpu.load_and_run([0xad, 0x10, 0x01, 0x00])
	assert(cpu.register_a.value == 0x15)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xad, 0x11, 0x01, 0x00])
	assert(cpu.register_a.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xad, 0x12, 0x01, 0x00])
	assert(cpu.register_a.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xad_lda_absolute_load_data PASSED!")


func test_0xb5_lda_zeropage_x_load_data():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x10, 0x15)
	cpu.memory.mem_write(0x11, 0b10000001)
	cpu.memory.mem_write(0x12, 0x00)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xb5, 0x00, 0x00])
	assert(cpu.register_a.value == 0x15)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xb5, 0x01, 0x00])
	assert(cpu.register_a.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xb5, 0x02, 0x00])
	assert(cpu.register_a.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xb5_lda_zeropage_x_load_data PASSED!")


func test_0xbd_lda_absolute_x_load_data():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x0110, 0x15)
	cpu.memory.mem_write(0x0111, 0b10000001)
	cpu.memory.mem_write(0x0112, 0x00)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xbd, 0x00, 0x01, 0x00])
	assert(cpu.register_a.value == 0x15)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xbd, 0x01, 0x01, 0x00])
	assert(cpu.register_a.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xbd, 0x02, 0x01, 0x00])
	assert(cpu.register_a.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xbd_lda_absolute_x_load_data PASSED!")


func test_0xb9_lda_absolute_y_load_data():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x0110, 0x15)
	cpu.memory.mem_write(0x0111, 0b10000001)
	cpu.memory.mem_write(0x0112, 0x00)
	cpu.load_and_run([0xa9, 0x10, 0xa8, 0xb9, 0x00, 0x01, 0x00])
	assert(cpu.register_a.value == 0x15)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0x10, 0xa8, 0xb9, 0x01, 0x01, 0x00])
	assert(cpu.register_a.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0x10, 0xa8, 0xb9, 0x02, 0x01, 0x00])
	assert(cpu.register_a.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xb9_lda_absolute_y_load_data PASSED!")


func test_0xa1_lda_indirect_x_load_data():
	var cpu = CPU6502.new()
	
	cpu.memory.mem_write(0x10, 0x10)
	cpu.memory.mem_write(0x11, 0x01)
	cpu.memory.mem_write(0x12, 0x11)
	cpu.memory.mem_write(0x13, 0x01)
	cpu.memory.mem_write(0x14, 0x12)
	cpu.memory.mem_write(0x15, 0x01)
	
	cpu.memory.mem_write(0x0110, 0x15)
	cpu.memory.mem_write(0x0111, 0b10000001)
	cpu.memory.mem_write(0x0112, 0x00)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xa1, 0x00, 0x00])
	assert(cpu.register_a.value == 0x15)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xa1, 0x02, 0x00])
	assert(cpu.register_a.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0x10, 0xaa, 0xa1, 0x04, 0x00])
	assert(cpu.register_a.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xa1_lda_indirect_x_load_data PASSED!")
	pass


func test_0xb1_lda_indirect_y_load_data():
	var cpu = CPU6502.new()
	cpu.memory.mem_write(0x00, 0x00)
	cpu.memory.mem_write(0x01, 0x01)
	cpu.memory.mem_write(0x02, 0x01)
	cpu.memory.mem_write(0x03, 0x01)
	cpu.memory.mem_write(0x04, 0x02)
	cpu.memory.mem_write(0x05, 0x01)

	cpu.memory.mem_write(0x0110, 0x15)
	cpu.memory.mem_write(0x0111, 0b10000001)
	cpu.memory.mem_write(0x0112, 0x00)
	cpu.load_and_run([0xa9, 0x10, 0xa8, 0xb1, 0x00, 0x00])
	assert(cpu.register_a.value == 0x15)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	cpu.load_and_run([0xa9, 0x10, 0xa8, 0xb1, 0x02, 0x00])
	assert(cpu.register_a.value == 0b10000001)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	cpu.load_and_run([0xa9, 0x10, 0xa8, 0xb1, 0x04, 0x00])
	assert(cpu.register_a.value == 0x00)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	print("test_0xb1_lda_indirect_y_load_data PASSED!")
	pass
