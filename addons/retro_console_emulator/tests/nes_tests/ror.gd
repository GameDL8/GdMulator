extends "res://addons/retro_console_emulator/tests/base_test.gd"


func test():
	test_0x6a_ror_acumulator_rotate_right()
	test_0x66_ror_zeropage_rotate_right()
	test_0x76_ror_zeropage_x_rotate_right()
	test_0x6e_ror_absolute_rotate_right()
	test_0x7e_ror_absolute_x_rotate_right()


func test_0x6a_ror_acumulator_rotate_right():
	var cpu = NesCPU.new()
	cpu.load_and_run([0xa9, 0b11000100, 0x38, 0x6a, 0x00])
	assert(cpu.register_a.value == 0b11100010)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	assert(cpu.flags.C.value == false)
	cpu.load_and_run([0xa9, 0b10000101, 0x6a, 0x00])
	assert(cpu.register_a.value == 0b01000010)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0xa9, 0b00000001, 0x6a, 0x00])
	assert(cpu.register_a.value == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	print("test_0x6a_ror_acumulator_rotate_right PASSED!")


func test_0x66_ror_zeropage_rotate_right():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x03, 0b11000100)
	cpu.memory.mem_write(0x04, 0b10000101)
	cpu.memory.mem_write(0x05, 0b00000001)
	cpu.load_and_run([0x38, 0x66, 0x03, 0x00])
	assert(cpu.memory.mem_read(0x03) == 0b11100010)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	assert(cpu.flags.C.value == false)
	cpu.load_and_run([0x66, 0x04, 0x00])
	assert(cpu.memory.mem_read(0x04) == 0b01000010)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0x66, 0x05, 0x00])
	assert(cpu.memory.mem_read(0x05) == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	print("test_0x66_ror_zeropage_rotate_right PASSED!")


func test_0x76_ror_zeropage_x_rotate_right():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x03+0x12, 0b11000100)
	cpu.memory.mem_write(0x04+0x12, 0b10000101)
	cpu.memory.mem_write(0x05+0x12, 0b00000001)
	cpu.load_and_run([0xa2, 0x12, 0x38, 0x76, 0x03, 0x00])
	assert(cpu.memory.mem_read(0x03+0x12) == 0b11100010)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	assert(cpu.flags.C.value == false)
	cpu.load_and_run([0xa2, 0x12, 0x76, 0x04, 0x00])
	assert(cpu.memory.mem_read(0x04+0x12) == 0b01000010)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0xa2, 0x12, 0x76, 0x05, 0x00])
	assert(cpu.memory.mem_read(0x05+0x12) == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	print("test_0x76_ror_zeropage_x_rotate_right PASSED!")


func test_0x6e_ror_absolute_rotate_right():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x4003, 0b11000100)
	cpu.memory.mem_write(0x4004, 0b10000101)
	cpu.memory.mem_write(0x4005, 0b00000001)
	cpu.load_and_run([0x38, 0x6e, 0x03, 0x40, 0x00])
	assert(cpu.memory.mem_read(0x4003) == 0b11100010)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	assert(cpu.flags.C.value == false)
	cpu.load_and_run([0x6e, 0x04, 0x40, 0x00])
	assert(cpu.memory.mem_read(0x4004) == 0b01000010)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0x6e, 0x05, 0x40, 0x00])
	assert(cpu.memory.mem_read(0x4005) == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	print("test_0x6e_ror_absolute_rotate_right PASSED!")


func test_0x7e_ror_absolute_x_rotate_right():
	var cpu = NesCPU.new()
	cpu.memory.mem_write(0x4003+0x12, 0b11000100)
	cpu.memory.mem_write(0x4004+0x12, 0b10000101)
	cpu.memory.mem_write(0x4005+0x12, 0b00000001)
	cpu.load_and_run([0xa2, 0x12, 0x38, 0x7e, 0x03, 0x40, 0x00])
	assert(cpu.memory.mem_read(0x4003+0x12) == 0b11100010)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == true)
	assert(cpu.flags.C.value == false)
	cpu.load_and_run([0xa2, 0x12, 0x7e, 0x04, 0x40, 0x00])
	assert(cpu.memory.mem_read(0x4004+0x12) == 0b01000010)
	assert(cpu.flags.Z.value == false)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	cpu.load_and_run([0xa2, 0x12, 0x7e, 0x05, 0x40, 0x00])
	assert(cpu.memory.mem_read(0x4005+0x12) == 0b00000000)
	assert(cpu.flags.Z.value == true)
	assert(cpu.flags.N.value == false)
	assert(cpu.flags.C.value == true)
	print("test_0x7e_ror_absolute_x_rotate_right PASSED!")

